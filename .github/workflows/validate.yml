name: Configuration Validation

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]

jobs:
  validate:
    runs-on: macos-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install validation dependencies
        run: |
          echo "Installing validation tools via Homebrew..."
          # Install core validation tools
          brew install fish zsh shellcheck yq markdownlint-cli2
          # Install dependencies expected by the dependencies validator
          brew install neovim tmux bats-core stow
          # Install optional tools to reduce warnings (commonly used in dotfiles)
          brew install ripgrep fd eza bat fzf

          # Verify installations
          echo "=== Validation Tools Check ==="
          echo "Fish version: $(fish --version)"
          echo "Zsh version: $(zsh --version)"
          echo "Shellcheck version: $(shellcheck --version | head -2)"
          echo "yq version: $(yq --version)"
          echo "markdownlint-cli2 version: $(markdownlint-cli2 --version || echo 'Not available')"
          echo "Neovim version: $(nvim --version | head -1)"
          echo "Tmux version: $(tmux -V)"
          echo "Bats version: $(bats --version)"
          echo "Stow version: $(stow --version | head -1)"

          # Refresh PATH for newly installed tools
          hash -r

      - name: Make validation scripts executable
        run: |
          # Ensure validation framework is executable
          chmod +x scripts/validate-config.sh
          chmod +x scripts/validators/*.sh
          chmod +x shared/generate-*.sh

      - name: Validate configuration integrity
        run: |
          # Debug: Check tool availability
          echo "üîß Checking tool availability before validation..."
          which fish || echo "fish not found in PATH"
          which zsh || echo "zsh not found in PATH"
          which shellcheck || echo "shellcheck not found in PATH"
          which yq || echo "yq not found in PATH"

          # Run full validation suite
          echo "üîç Running configuration validation..."
          ./scripts/validate-config.sh --ci
        env:
          CI: true

      - name: Generate validation report
        if: always()
        run: |
          # Generate detailed validation report
          echo "üìä Generating validation report..."
          ./scripts/validate-config.sh --report --ci || true

          echo "## Configuration Validation Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Count files validated
          shell_files=$(find . -name "*.fish" -o -name "*.zsh" -o -name "*.sh" -o -name "*.bash" | grep -v node_modules | wc -l)
          md_files=$(find . -name "*.md" | grep -v node_modules | grep -v scratchpads | wc -l)

          echo "### Files Validated" >> $GITHUB_STEP_SUMMARY
          echo "- **Shell files**: $shell_files" >> $GITHUB_STEP_SUMMARY
          echo "- **Markdown files**: $md_files" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "### Validation Categories" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ **Shell syntax**: Fish, Zsh, Bash scripts" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ **Abbreviations**: YAML consistency and generation" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ **Environment**: Variable synchronization" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ **Dependencies**: Required tool availability" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ **Markdown**: Formatting and style consistency" >> $GITHUB_STEP_SUMMARY

      - name: Performance check
        run: |
          # Measure validation performance
          start_time=$(date +%s)

          ./scripts/validate-config.sh --quiet --ci

          end_time=$(date +%s)
          duration=$((end_time - start_time))

          echo "‚è±Ô∏è Validation execution time: ${duration}s"

          # Fail if validation takes more than 45 seconds
          if [ $duration -gt 45 ]; then
            echo "‚ùå Validation exceeded 45-second performance target: ${duration}s"
            exit 1
          else
            echo "‚úÖ Validation completed within performance target: ${duration}s"
          fi

      - name: Auto-fix attempt (if validation failed)
        if: failure()
        run: |
          echo "üîß Attempting automatic fixes..."

          # Try to fix common issues
          ./scripts/validate-config.sh --fix --ci || echo "Auto-fix completed with remaining issues"

          # Show what was potentially fixed
          if git diff --quiet; then
            echo "‚ÑπÔ∏è No automatic fixes were applied"
          else
            echo "‚ú® Automatic fixes applied to:"
            git diff --name-only

            echo "## Auto-Fix Results" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "The following files were automatically modified:" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            git diff --name-only | sed 's/^/- /' >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Note**: These changes are suggestions. Review before committing." >> $GITHUB_STEP_SUMMARY
          fi

  # Separate job that depends on validation passing
  validate-dependencies:
    runs-on: macos-latest
    needs: validate
    if: success()

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Validate Brewfile dependencies
        run: |
          # Check that Brewfile is valid
          if [ -f "brew/Brewfile" ]; then
            echo "üç∫ Validating Brewfile..."

            # Install Homebrew if not present (should be on macOS runners)
            if ! command -v brew >/dev/null 2>&1; then
              /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
            fi

            # Validate Brewfile syntax without installing packages
            cd brew && brew bundle check --verbose || true

            echo "‚úÖ Brewfile validation completed"
          else
            echo "‚ÑπÔ∏è No Brewfile found to validate"
          fi

      - name: Validate critical paths
        run: |
          # Verify critical dotfiles structure
          echo "üìÅ Validating dotfiles structure..."

          critical_paths=(
            "shared/abbreviations.yaml"
            "shared/environment.sh"
            "shared/environment.fish"
            "scripts/validate-config.sh"
            "fish/.config/fish"
            "zsh/.config/zsh"
            "nvim/.config/nvim"
          )

          missing_paths=()
          for path in "${critical_paths[@]}"; do
            if [ ! -e "$path" ]; then
              missing_paths+=("$path")
            fi
          done

          if [ ${#missing_paths[@]} -gt 0 ]; then
            echo "‚ùå Missing critical paths:"
            printf ' - %s\n' "${missing_paths[@]}"
            exit 1
          else
            echo "‚úÖ All critical paths exist"
          fi
